basePath: /
definitions:
  handlers.AuthResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        example: Invalid request data
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: Password123
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        minLength: 2
        type: string
      password:
        example: Password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.UpdateUserRequest:
    properties:
      name:
        example: John Doe Updated
        minLength: 2
        type: string
    required:
    - name
    type: object
  handlers.UpdateUserResponse:
    properties:
      message:
        example: User updated successfully
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.UserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.UserResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A simple, high-performance Go API with authentication and user management
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Simple API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to receive JWT token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Authenticate user
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email, password, and name
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request data or weak password
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Retrieve the profile information of the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the name of the currently authenticated user
      parameters:
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/handlers.UpdateUserResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - Users
  /health:
    get:
      consumes:
      - application/json
      description: Check if the server is running and healthy
      produces:
      - application/json
      responses:
        "200":
          description: Server status information
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - Health
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication operations
  name: Authentication
- description: User management operations
  name: Users
- description: Health check operations
  name: Health
